package za.co.rdata.r_datamobile;import android.app.AlertDialog;import android.content.Intent;import android.database.Cursor;import android.database.SQLException;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.os.Bundle;import android.text.TextUtils;import android.view.View;import android.view.ViewGroup;import android.widget.ArrayAdapter;import android.widget.ListView;import android.widget.TextView;import android.widget.Toast;import androidx.annotation.NonNull;import androidx.appcompat.app.AppCompatActivity;import com.android.volley.Request;import com.android.volley.RequestQueue;import com.android.volley.toolbox.Volley;import com.google.android.material.floatingactionbutton.FloatingActionButton;import org.jumpmind.symmetric.ISymmetricEngine;import org.jumpmind.symmetric.android.AndroidSymmetricEngine;import java.util.ArrayList;import java.util.List;import za.co.rdata.r_datamobile.DBHelpers.DBHelper;import za.co.rdata.r_datamobile.DBHelpers.SymmetricDS_Helper;import za.co.rdata.r_datamobile.DBHelpers.sqliteDBHelper;import za.co.rdata.r_datamobile.Models.model_pro_sys_menu;import za.co.rdata.r_datamobile.fileTools.preference_saving;import za.co.rdata.r_datamobile.locationTools.DeviceLocationService;import static org.jumpmind.symmetric.common.ParameterConstants.ENGINE_NAME;public class MainActivity extends AppCompatActivity {    private List<model_pro_sys_menu> menuItems = new ArrayList<>();    static public sqliteDBHelper sqliteDbHelper;    public static String NODE_ID = "";    public static String USER = "";    public static String SYMMETRICDS_REGISTRATION_URL = ""; //"http://196.41.122.216:31415/sync/";    public static final String SYMMETRICDS_NODE_GROUP_ID = "MOBILE";    private RequestQueue mRequestQueue;    private static MainActivity mInstance;    public static final String TAG = MainActivity.class.getSimpleName();    @Override    protected void onResume() {        super.onResume();        sqliteDbHelper = sqliteDBHelper.getInstance(this.getApplicationContext());        ListView listView = findViewById(R.id.mainActivity_LVmenuItems);        TextView TV_user = findViewById(R.id.A_main_TV_username);        menuItems = new ArrayList<>();        menuItems = DBHelper.pro_sys_menu.GetMenuByUser(USER);        TV_user.setText(USER);        ArrayAdapter<model_pro_sys_menu> adapter = new menuItems_ListAdapter();        listView.setAdapter(adapter);        listView.setOnItemClickListener((parent, view, position, id) -> {            TextView TVmodule = view.findViewById(R.id.menu_list_item_program);            try {                Intent intent = new Intent(MainActivity.this, Class.forName(TVmodule.getText().toString()));                finish();                startActivity(intent);            } catch (ClassNotFoundException e) {                e.printStackTrace();            }        });    }    public static void refreshdb() {        sqliteDbHelper = sqliteDBHelper.getInstance(mInstance.getApplicationContext());    }    public static synchronized MainActivity getInstance() {        return mInstance;    }    public RequestQueue getRequestQueue() {        if (mRequestQueue == null) {            mRequestQueue = Volley.newRequestQueue(getApplicationContext());        }        return mRequestQueue;    }    public <T> void addToRequestQueue(Request<T> req, String tag) {        req.setTag(TextUtils.isEmpty(tag) ? TAG : tag);        getRequestQueue().add(req);    }    public <T> void addToRequestQueue(Request<T> req) {        req.setTag(TAG);        getRequestQueue().add(req);    }    public void cancelPendingRequests(Object tag) {        if (mRequestQueue != null) {            mRequestQueue.cancelAll(tag);        }    }    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        mInstance = this;        setContentView(R.layout.activity_main);        //DeleteDB();        sqliteDbHelper = sqliteDBHelper.getInstance(this.getApplicationContext());        NODE_ID = preference_saving.getPreferenceString(this,"node_id");        USER = preference_saving.getPreferenceString(this,"user");        SYMMETRICDS_REGISTRATION_URL = preference_saving.getPreferenceString(this,"serverURL");        //SymmetricDS_Helper.Start_SymmetricDS(this.getApplicationContext(),false);        startService(new Intent(this,DeviceLocationService.class));        //byte[] image = DBHelper.pro_sys_images.GetImageByNodeID(NODE_ID);        //if (image != null) Bitmap b1 = BitmapFactory.decodeByteArray(image, 0, image.length);        FloatingActionButton flbSetting = findViewById(R.id.flbSettings);        flbSetting.setOnClickListener(view -> {            try {                Cursor setttingscheck = sqliteDbHelper.getReadableDatabase().rawQuery("SELECT parm_value FROM pro_sys_parms WHERE parm='settings_active'", null);                setttingscheck.moveToFirst();                if (setttingscheck.getInt(0) == 1) {                    setttingscheck.close();                    Intent settingsintent = new Intent(this, SettingsActivity.class);                    startActivity(settingsintent);                } else {                    setttingscheck.close();                    Toast.makeText(MainActivity.this, "Settings Have Been Disabled", Toast.LENGTH_SHORT).show();                }            } catch (SQLException | NullPointerException ex) {                ex.printStackTrace();                Intent settingsintent = new Intent(this, SettingsActivity.class);                startActivity(settingsintent);            }        });    }    @Override    protected void onDestroy() {        super.onDestroy();    }    private class menuItems_ListAdapter extends ArrayAdapter<model_pro_sys_menu> {        menuItems_ListAdapter() {            super(MainActivity.this, R.layout.select_menu_list_item, menuItems);        }        @NonNull        @Override        public View getView(int position, View convertView, @NonNull ViewGroup parent) {            //Make sure we have a view to work with            View itemView = convertView;            if (itemView == null)                itemView = getLayoutInflater().inflate(R.layout.select_menu_list_item, parent, false);            model_pro_sys_menu menuItem = menuItems.get(position);            try {                TextView textview_menu_description = itemView.findViewById(R.id.menu_list_item_description);                TextView textview_menu_program = itemView.findViewById(R.id.menu_list_item_program);                textview_menu_description.setText(menuItem.getMod_desc());                textview_menu_program.setText(menuItem.getModule());            } catch (Exception e) {                e.printStackTrace();            }            return itemView;        }    }    public void onBackPressed() {        ISymmetricEngine engine = AndroidSymmetricEngine.findEngineByName(ENGINE_NAME);        AlertDialog.Builder alertDialog = new AlertDialog.Builder(                this);            alertDialog.setPositiveButton("Yes", (dialog, which) -> {        try {                if (engine.getOutgoingBatchService().countOutgoingBatchesUnsent() == 0) {                    finishAffinity();                    sqliteDbHelper.close();                    System.exit(0);                } else {                    AlertDialog.Builder alertDialog2 = new AlertDialog.Builder(                            this);                    alertDialog2.setPositiveButton("Yes", (dialog2, which2) -> {                        finishAffinity();                        sqliteDbHelper.close();                        System.exit(0);                    });                    alertDialog2.setNegativeButton("No", null);                    alertDialog2.setMessage("Not All Batches have sent. Are you sure you want to quit?");                    alertDialog2.setTitle("Exit Promob");                    alertDialog2.show();                }        } catch (NullPointerException e) {            e.printStackTrace();            finishAffinity();            sqliteDbHelper.close();            System.exit(0);        }            });            alertDialog.setNegativeButton("No", null);            alertDialog.setMessage("Are you sure?");            alertDialog.setTitle("Exit Promob");            alertDialog.show();    }}